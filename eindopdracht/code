import cv2 as cv
import matplotlib.pyplot as plt
from tensorflow.keras.layers import Conv2D, Flatten, Dense, LeakyReLU, BatchNormalization, MaxPool2D, Dropout, GlobalAveragePooling2D, AveragePooling2D
from tensorflow import keras
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
import xml.etree.ElementTree as ET 
import pandas as pd
from skimage.transform import resize
from skimage import io
import tensorflow as tf
from tensorflow.keras import layers
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from keras import Model
from keras.applications.mobilenet import MobileNet, preprocess_input
from keras.layers import Conv2D, Reshape
import matplotlib.patches as patches
from keras.backend import epsilon

np.random.seed(1)
def loss(gt,pred):
    intersections = 0
    unions = 0
    diff_width = np.minimum(gt[:,0] + gt[:,2], pred[:,0] + pred[:,2]) - np.maximum(gt[:,0], pred[:,0])
    diff_height = np.minimum(gt[:,1] + gt[:,3], pred[:,1] + pred[:,3]) - np.maximum(gt[:,1], pred[:,1])
    intersection = diff_width * diff_height
    
    # Compute union
    area_gt = gt[:,2] * gt[:,3]
    area_pred = pred[:,2] * pred[:,3]
    union = area_gt + area_pred - intersection

#     Compute intersection and union over multiple boxes
    for j, _ in enumerate(union):
        if union[j] > 0 and intersection[j] > 0 and union[j] >= intersection[j]:
            intersections += intersection[j]
            unions += union[j]

    # Compute IOU. Use epsilon to prevent division by zero
    iou = np.round(intersections / (unions + epsilon()), 4)
    iou = iou.astype(np.float32)
    return iou

def IoU(y_true, y_pred):
    iou = tf.py_function(loss, [y_true, y_pred], tf.float32)
    return iou


#Functie die csv data uit leest en zet het in variable
def CsvReader():
    #csv train data laden
    TrainCsv = pd.read_csv(
        "train_labels.csv",
        names=["filename", "width", "height", "class", "xmin",
            "ymin", "xmax", "ymax"])
    #csv test data laden
    TestCsv = pd.read_csv(
        "test_labels.csv",
        names=["filename", "width", "height", "class", "xmin",
            "ymin", "xmax", "ymax"])
    return TrainCsv, TestCsv

#functie die de test data resized zonder te warpen door gebruik te maken van borders
def ResizeTestData(image):
    borderarrayx = []
    borderarrayy = []
    #borderarrays maken
    for i in range(0, 224):
        borderarrayx.append(np.array([0, 0, 0]))
    borderarrayx = np.array(borderarrayx)
    shape = image.shape
    height = shape[0]
    width = shape[1]
    if(height > width):
        x = int((width/height) * 224)
        y = 224
        borderamount = int((224 - x)/2)
        #resize
        image = resize(image, (y, x, 3))
        borderarrayy = []
        #make border array
        for s in range(0, borderamount):
            borderarrayy.append(np.array([0, 0, 0]))
        borderarrayy = np.array(borderarrayy)
        image = image.tolist()
        #add border array
        for j in range(0, 224):
            for item in borderarrayy:
                image[j].insert(0, item)
                image[j].append(item)
            #als borderamount ongelijk is
            if (len(image[j])==223):
                image[j].append(borderarrayy[0])
            image[j] = np.array(image[j])
        image = np.array(image)        
    elif (width != height):
        x = 224
        y = int((height/width) * 224)
        borderamount = int((224 - y) /2)
        #image resizen
        image = resize(image, (y, x, 3))
        image = image.tolist()
        #border toevoegen
        for j in range(0, int(borderamount)):
            image.insert(0, borderarrayx)
            image.append(borderarrayx)
            #als borderamount ongelijk is
        if(len(image) == 223):
            image.append(borderarrayx)
        image = np.array(image)
    else:
        #als image al vierkant is kan hij direcht geresized worden zonder border
        image = resize(image, (224, 224, 3))
        image = np.array(image)   
    return image

    

#functie die een foto knipt op basis van de gegeven boundingbox en de foto resized zonder te warpen door borders toe te voegen
def PreprocessImage(ImagesList, TrainCoordList):
    kleinefotos = []
    borderarrayx = []
    borderarrayy = []
    #borderarrays maken
    for i in range(0, 224):
        borderarrayx.append(np.array([0, 0, 0]))
    borderarrayx = np.array(borderarrayx)
    #alle foto's de grootte maken van hun boundingbox
    for i in range(0, len(ImagesList)):
        xmin = int(TrainCoordList[i][0])
        ymin = int(TrainCoordList[i][1])
        xmax = int(TrainCoordList[i][2])
        ymax = int(TrainCoordList[i][3])
        height = ymax - ymin
        width = xmax - xmin
        #als de foto groter is in de hoogte dan in de breedte
        if(height > width):
            x = int((width/height) * 224)
            y = 224
            borderamount = int((224 - x)/2)
            croppedimage = ImagesList[i][ymin:ymax, xmin:xmax]
            croppedimage = resize(croppedimage, (y, x, 3))
            foto = croppedimage
            borderarrayy = []
            for s in range(0, borderamount):
                borderarrayy.append(np.array([0, 0, 0]))
            borderarrayy = np.array(borderarrayy)
            foto = foto.tolist()
            for j in range(0, 224):
                for item in borderarrayy:
                    foto[j].insert(0, item)
                    foto[j].append(item)
                if (len(foto[j])==223):
                    foto[j].append(borderarrayy[0])
                foto[j] = np.array(foto[j])
            foto = np.array(foto)
            kleinefotos.append(foto)
        #als de foto groter is in de breedte dan de hoogte     
        elif (width != height):
            x = 224
            y = int((height/width) * 224)
            borderamount = int((224 - y) /2)
            croppedimage = ImagesList[i][ymin:ymax, xmin:xmax]
            croppedimage = resize(croppedimage, (y, x, 3))
            foto = croppedimage
            foto = foto.tolist()
            for j in range(0, int(borderamount)):
                foto.insert(0, borderarrayx)
                foto.append(borderarrayx)
                if(len(foto) == 223):
                    foto.append(borderarrayx)
            foto = np.array(foto)
            kleinefotos.append(foto)
        #als de foto al vierkant is
        else:
            #als de foto al vierkant is kan hij direct geresized worden
            croppedimage = ImagesList[i][ymin:ymax, xmin:xmax]
            croppedimage = resize(croppedimage, (224, 224, 3))
            foto = np.array(croppedimage)
            kleinefotos.append(foto)
    kleinefotos = np.array(kleinefotos)
    kleinefotos[5][0]
    return kleinefotos



#csv info uitladen en in variable zetten
TrainCsv, TestCsv = CsvReader()

#bevat alle image filenames
TrainImageFiles = TrainCsv.filename
TestImageFiles = TestCsv.filename

#xmin, ymin, xmax, ymax
KeypointsAmount = 4

#list van files maken
TrainFileList = np.array([])
for i in range(0, len(TrainCsv.filename)-1):
    TrainFileList = np.append(TrainFileList, TrainCsv.filename[i])

#list van coordinaten maken
TrainCoordList = []
for i in range(0, len(TrainCsv.xmin)-1):
    TrainCoordList.append([TrainCsv.xmin[i], TrainCsv.ymin[i], TrainCsv.xmax[i], TrainCsv.ymax[i]])
TrainCoordList = np.array(TrainCoordList)

#lijst die arrayed images bevat 
ImagesList = []
for image in TrainFileList:
    ImagesList.append(preprocess_input(io.imread("./images/" + image)))
ImagesList = np.array(ImagesList)

#alle images croppen op basis van boundingbox en resizen zonder te warpen met behulp van borders
nieuwe_input = PreprocessImage(ImagesList=ImagesList, TrainCoordList=TrainCoordList)

#model
model = MobileNet(input_shape=(224,224,3), include_top=False, alpha = 1.0)
for layers in model.layers:
    layers.trainable = False
x = model.layers[-1].output
x = Conv2D(4, kernel_size=4, name="coords")(x)
# x = AveragePooling2D(pool_size = (2,2))(x)
# x = AveragePooling2D(pool_size = (2,2))(x)
x = GlobalAveragePooling2D()(x)
x = Reshape((4,))(x)
#print("hdhhdhdhd", x)
model = Model(inputs=model.inputs, outputs=x)
model.summary()
gt = TrainCoordList
model.compile(optimizer="Adam", loss = "mse", metrics = [IoU])
stop = EarlyStopping(monitor='IoU', patience=10, mode="max" )
reduce_lr = ReduceLROnPlateau(monitor='IoU',factor=0.2,patience=10, min_lr=1e-7, verbose=1, mode="max" )
model.fit(nieuwe_input, TrainCoordList, epochs=250,callbacks=[stop,reduce_lr], verbose = 2)

#testen op een image
image = "wasbeerzwart.jpg"
# wasbeerzwart = "wasbeerzwart.jpg"
# wasbeerwit = "wasbeerwit.jpg"
image = cv.imread(image)
image_height, image_width, _ = image.shape
test_image = ResizeTestData(image=image)
feat_scaled = preprocess_input(np.array(test_image, dtype=np.float32))
images = np.array(test_image)
test=np.expand_dims(images,axis=0)
ans = model.predict(x=np.array([feat_scaled]))[0]

ans[0] = int(ans[0] * (image_width / 224))
ans[1] = int(ans[1] * (image_height / 224))
ans[2] = int(ans[2] * (image_width / 224))
ans[3] = int(ans[3] * (image_height / 224))
print(abs(ans))

fig, ax = plt.subplots(1, 1, figsize=(8, 4))
ax.imshow(test_image)

#boundingbox maken
rect = patches.Rectangle((ans[0], ans[1]), (ans[2] - ans[0]) , (ans[3]- ans[1]) , linewidth=2, edgecolor='r', facecolor='none')
ax.add_patch(rect)

#test foto met boundingbox laten zien
ax.set_title("original")
plt.show() 
